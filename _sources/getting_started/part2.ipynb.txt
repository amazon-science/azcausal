{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c5579eee",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Part II: The Treatment Effect"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d49bef5f-0f21-4456-8aff-374cf1d280da",
   "metadata": {},
   "source": [
    "After bringing the data into the right format, we can use an `Estimator` to make predictions of the treatment effect. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "908664ab-5889-4ff6-8330-dad2a9e368b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "%run ./part1.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bec01e5c-2134-44ab-85d2-62ba7ffdad32",
   "metadata": {},
   "source": [
    "Like commonly done for time series it is always a good idea to quickly spot check the time series:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "37ed69c1-d7cc-4e2b-a42e-8f97001ba208",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot: xlabel='Year'>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(panel.summary())\n",
    "\n",
    "panel.outcome.mean(axis=1).plot(figsize=(12, 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb44965e-c76f-45bc-9487-20c221f8e4c0",
   "metadata": {},
   "source": [
    "For example, let us use the popular `DID` estimator to estimate the *Average Treatment Effect on the Treated (ATT)* for the panel data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b1a08910-e0ee-4416-a2b0-827635281080",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect: -27.35                                                              |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                  Percentage                                  |\n",
      "|  Effect: -31.19                                                              |\n",
      "|  Observed: 68.81                                                             |\n",
      "|  Counter Factual: 100.00                                                     |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.estimators.panel.did import DID\n",
    "\n",
    "# initialize an estimator object\n",
    "estimator = DID()\n",
    "\n",
    "# estimate the treatment effect\n",
    "result = estimator.fit(panel)\n",
    "\n",
    "# print the treatment effect summary\n",
    "print(result.summary(percentage=True, cumulative=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a1f38a0-7a93-4817-95c5-d40c1c67c02b",
   "metadata": {},
   "source": [
    "Now, the treatment effect without any confidence intervals is often not that helpful. Some estimators come with error estimates out of the box and will directly provide them (e.g. `DIDRegression`). For others, we can use an `Error` estimator to attach an error and calculate confidence intervals along with it. \n",
    "\n",
    "The following error estimators are available:\n",
    "\n",
    "- **Bootstrap**: Randomly sample units (with replacement) from the panel data and estimate the effect.\n",
    "- **Placebo**: Only sample from control units as use them as placebo.\n",
    "- **JackKnife**: Leave one out crossvalidation but removing one unit at a time.\n",
    "\n",
    "Each error estimate requires a treatment estimated on a new panel derived from the original data set by the corresponding method."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9faa1895-d12d-4027-8b0f-1441c6e22532",
   "metadata": {},
   "source": [
    "Each estimator has a method called `estimator.error(result, method)` which takes the original `Result` object returned before and the `Error` estimation method that should be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "326b096a-65ee-4bab-b059-a52b81b3cfda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (±SE): -27.35 (±2.6899)                                              |\n",
      "|  Confidence Interval (90%): [-31.77 , -22.92]                           (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                  Percentage                                  |\n",
      "|  Effect (±SE): -31.19 (±3.0672)                                              |\n",
      "|  Confidence Interval (90%): [-36.23 , -26.14]                           (-)  |\n",
      "|  Observed: 68.81                                                             |\n",
      "|  Counter Factual: 100.00                                                     |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.core.error import Bootstrap\n",
    "\n",
    "se, runs = estimator.error(result, Bootstrap(n_samples=500))\n",
    "\n",
    "print(result.summary(conf=90))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce2db807-928f-4b19-a50c-15d492c3dd81",
   "metadata": {},
   "source": [
    "Similarly, we can use `SDID` as an estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b7ca16f9-6688-4c6a-9a29-40ea3b29d28f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (±SE): -15.60 (±2.9161)                                              |\n",
      "|  Confidence Interval (95%): [-21.32 , -9.8884]                          (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 75.95                                                      |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                  Percentage                                  |\n",
      "|  Effect (±SE): -20.54 (±3.8393)                                              |\n",
      "|  Confidence Interval (95%): [-28.07 , -13.02]                           (-)  |\n",
      "|  Observed: 79.46                                                             |\n",
      "|  Counter Factual: 100.00                                                     |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                  Cumulative                                  |\n",
      "|  Effect (±SE): -187.25 (±34.99)                                              |\n",
      "|  Confidence Interval (95%): [-255.83 , -118.66]                         (-)  |\n",
      "|  Observed: 724.20                                                            |\n",
      "|  Counter Factual: 911.45                                                     |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.estimators.panel.sdid import SDID\n",
    "from azcausal.core.error import JackKnife\n",
    "\n",
    "# initialize an estimator object\n",
    "estimator = SDID()\n",
    "\n",
    "# estimate the treatment effect\n",
    "result = estimator.fit(panel)\n",
    "\n",
    "# here we use JackKnife which is optmized to be run with SDID\n",
    "estimator.error(result, JackKnife())\n",
    "\n",
    "# print the treatment effect summary\n",
    "print(result.summary(percentage=True, cumulative=True))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1.36811,
   "end_time": "2023-09-28T19:27:09.898442",
   "environment_variables": {},
   "exception": null,
   "input_path": "/Users/blankjul/workspace/azcausal/docs/source/getting_started.ipynb",
   "output_path": "/Users/blankjul/workspace/azcausal/docs/source/getting_started.ipynb",
   "parameters": {},
   "start_time": "2023-09-28T19:27:08.530332",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
