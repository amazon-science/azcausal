{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "401d28a6",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Error"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecd6c81b-e305-4cd9-acfa-61d9b12ee252",
   "metadata": {
    "tags": []
   },
   "source": [
    "Out of the books different ways of measearing the estimation error of an estimator are supported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7d1fa6c3-ed94-4b8c-9309-64628e60be42",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect: -27.35                                                              |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.core.parallelize import Joblib\n",
    "from azcausal.data import CaliforniaProp99\n",
    "from azcausal.estimators.panel.did import DID\n",
    "\n",
    "panel = CaliforniaProp99().panel()\n",
    "\n",
    "# initialize an estimator object, here difference in difference (did)\n",
    "estimator = DID()\n",
    "\n",
    "# run the estimator\n",
    "result = estimator.fit(panel)\n",
    "\n",
    "print(result.summary(percentage=False))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "81c05cad-4416-4b8e-ac60-c8e6519ad804",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def plot_error_distribution(runs):\n",
    "\n",
    "    plt.subplots(1, 1, figsize=(12,2))\n",
    "    x = np.array([result.effect.value for result in runs])\n",
    "    plt.hist(x, bins=31, color='blue')\n",
    "    plt.axvline(x.mean(), color='red')\n",
    "\n",
    "    return x.mean(), x.std()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0575219",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Bootstrap"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0b34c09-717d-4adf-b53d-7f0dc53fff8b",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Random"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "56f037b9-e389-4604-b703-f802664e4584",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (±SE): -27.35 (±2.7784)                                              |\n",
      "|  Confidence Interval (95%): [-32.79 , -21.90]                           (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-27.36749857346469, 2.7783971651161945)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from azcausal.core.error import Bootstrap\n",
    "\n",
    "method = Bootstrap(n_samples=500)\n",
    "se, runs = method.run(result)\n",
    "\n",
    "# print out information about the estimate\n",
    "print(result.summary(percentage=False))\n",
    "\n",
    "plot_error_distribution(runs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "300039c0-7129-48c9-9941-6f6f0559dfbc",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Stratified"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a178f90e-782d-44c4-a2ad-ae1934d57bb3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (±SE): -27.35 (±2.7462)                                              |\n",
      "|  Confidence Interval (95%): [-32.73 , -21.97]                           (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-27.444945386023104, 2.7462024179480418)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from azcausal.core.error import Bootstrap\n",
    "\n",
    "method = Bootstrap(n_samples=500, mode='stratified')\n",
    "se, runs = method.run(result)\n",
    "\n",
    "# print out information about the estimate\n",
    "print(result.summary(percentage=False))\n",
    "\n",
    "plot_error_distribution(runs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f48415e8-1be3-4bd4-8467-8b09a2f410e8",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf15d834-fc17-43ab-8dd4-f92af48caffa",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (±SE): -27.35 (±0.230007)                                            |\n",
      "|  Confidence Interval (95%): [-27.80 , -26.90]                           (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-27.358925416584082, 0.2300065201466684)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from azcausal.core.error import Bootstrap\n",
    "\n",
    "method = Bootstrap(n_samples=500, mode='bayes', alpha=4.0)\n",
    "se, runs = method.run(result)\n",
    "\n",
    "# print out information about the estimate\n",
    "print(result.summary(percentage=False))\n",
    "\n",
    "plot_error_distribution(runs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c78d751",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Placebo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "178819ae-c528-4d81-8d4c-0eaef7538f76",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (±SE): -27.35 (±18.03)                                               |\n",
      "|  Confidence Interval (95%): [-62.68 , 7.9826]                         (+/-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-0.7310601604338312, 18.02671870613764)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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q1evftfX6OvrS29vb78FAAAARqK9DtFFUWT+/Pk566yzMnHixCRJd3d3kqS5ubnfts3NzdV177RkyZI0NTVVlwkTJuxtSQAAA9TV1W4BYPTb6xA9b968PP/887nvvvsGrKt7x0+RoigGjL1t4cKF6enpqS6bNm3a25IAAABgn9qr+0RfeeWVeeSRR/LEE0/k2GOPrY63tLQkeWtGevz48dXxrVu3DpidflulUkmlUtmbMgAAAKCmBjUTXRRF5s2bl5/97Gd5/PHH09bW1m99W1tbWlpa0tXVVR3btWtXVq1alalTpw5NxQAAADBMBjUTPXfu3Nx77715+OGH09DQUP2cc1NTU+rr61NXV5eOjo50dnamvb097e3t6ezszJgxYzJz5sx98gYAAACgVgYVopcvX54kmT59er/xu+++O5dddlmSZMGCBdm5c2fmzJmTbdu2ZcqUKVm5cmUaGhqGpGAAAAAYLh/oPtH7gvtEA+/knokwuriK9ejlPtHvTe/vf9wn+sBRs/tEAwAAwIFEiAYAAICShGgAAAAoSYgGAACAkoRoAAAAKGlQt7hiIFfQAwDYf7liNjBYZqIBAACgJDPRAAAABxhn1O49M9EAAABQkplogP/ir7KMJPoRAEYeM9EAAABQkhANAAAAJTmdGwAA4F24BRrvxkw0AAAAlCREAwAAQElCNAAAAJQkRAMAAEBJQjQAAACUJEQDAABASUI0AAAAlCREAwAAQElCNAAAAJQkRAMAAEBJQjQAAACUJEQDAABASUI0AAAAlCREAwAAQElCNAAAAJQkRAMAAEBJQjQAAACUJEQDAABASfssRN9xxx1pa2vLYYcdlkmTJuXJJ5/cV7sCAACAmtgnIfqBBx5IR0dHFi1alGeffTZnn312LrjggmzcuHFf7A4AAABqoq4oimKoX3TKlCn52Mc+luXLl1fHTj755Fx00UVZsmRJv237+vrS19dXfdzT05PjjjsumzZtSmNj41CXNuSammq3r56e2u0LRpJaHme15Jjm/YzWnzGj9Zgmqc+OdKc1SdKSLdmZscNcETAS7A+/8/T29mbChAn55z//mab3+UF1yFDvfNeuXVm7dm2uueaafuMzZszI6tWrB2y/ZMmSXHfddQPGJ0yYMNSl7ff80gGji2OakUQ/MhR2JvlPK7UOXyHAiLI//YzZvn177UP0q6++mt27d6e5ubnfeHNzc7q7uwdsv3DhwsyfP7/6eM+ePXnttddy9NFHp66ubqjL22+8/ZeQ/WVGHj4oPc+BSN9zoNHzHIj0/f6hKIps3749ra3v/wfAIQ/Rb3tnAC6K4l1DcaVSSaVS6Td2xBFH7Kuy9juNjY0ONg4oep4Dkb7nQKPnORDp+5Hv/Wag3zbkFxYbN25cDj744AGzzlu3bh0wOw0AAAD7kyEP0YceemgmTZqUrq6ufuNdXV2ZOnXqUO8OAAAAamafnM49f/78zJo1K5MnT84ZZ5yRFStWZOPGjZk9e/a+2N2oVKlUcu211w441R1GKz3PgUjfc6DR8xyI9P3os09ucZUkd9xxR5YuXZqXX345EydOzK233ppzzjlnX+wKAAAAamKfhWgAAAAYbYb8M9EAAAAwWgnRAAAAUJIQDQAAACUJ0QAAAFCSED0CPfroo5kyZUrq6+szbty4XHzxxf3Wb9y4MZ/+9KczduzYjBs3LldddVV27do1TNXC0Onr68upp56aurq6PPfcc/3W6XtGk5deeilf/epX09bWlvr6+px44om59tprB/S0vme0ueOOO9LW1pbDDjsskyZNypNPPjncJcGQWLJkSU4//fQ0NDTkmGOOyUUXXZT169f326YoiixevDitra2pr6/P9OnTs27dumGqmA9CiB5hHnzwwcyaNStf+cpX8oc//CFPPfVUZs6cWV2/e/fuXHjhhdmxY0d+/etf5/7778+DDz6Yb37zm8NYNQyNBQsWpLW1dcC4vme0+fOf/5w9e/bkBz/4QdatW5dbb701d955Z7797W9Xt9H3jDYPPPBAOjo6smjRojz77LM5++yzc8EFF2Tjxo3DXRp8YKtWrcrcuXPz9NNPp6urK2+++WZmzJiRHTt2VLdZunRpbrnllixbtixr1qxJS0tLzjvvvGzfvn0YK2evFIwYb7zxRvHhD3+4+OEPf/g/t3nssceKgw46qNi8eXN17L777isqlUrR09NTizJhn3jssceKk046qVi3bl2RpHj22Wf7rdP3jHZLly4t2traqo/1PaPNxz/+8WL27Nn9xk466aTimmuuGaaKYN/ZunVrkaRYtWpVURRFsWfPnqKlpaX43ve+V93m3//+d9HU1FTceeedw1Ume8lM9AjyzDPPZPPmzTnooINy2mmnZfz48bngggv6nebxm9/8JhMnTuw3W3f++eenr68va9euHY6y4QP7+9//nssvvzw//vGPM2bMmAHr9T0Hgp6enhx11FHVx/qe0WTXrl1Zu3ZtZsyY0W98xowZWb169TBVBftOT09PklT/X9+wYUO6u7v7HQOVSiXTpk1zDOyHhOgR5MUXX0ySLF68ON/5znfy85//PEceeWSmTZuW1157LUnS3d2d5ubmfs878sgjc+ihh6a7u7vmNcMHVRRFLrvsssyePTuTJ09+1230PaPdX//619x+++2ZPXt2dUzfM5q8+uqr2b1794Cebm5u1s+MOkVRZP78+TnrrLMyceLEJKn2uWNgdBCia2Dx4sWpq6t7z+X3v/999uzZkyRZtGhRPve5z2XSpEm5++67U1dXl5/+9KfV16urqxuwj6Io3nUchkvZvr/99tvT29ubhQsXvufr6Xv2B2X7/r9t2bIln/rUp3LJJZfka1/7Wr91+p7R5p29q58ZjebNm5fnn38+991334B1joHR4ZDhLuBAMG/evHzxi198z20+8pGPVC8qcMopp1THK5VKTjjhhOpFN1paWvLb3/6233O3bduWN954Y8BftmA4le37G264IU8//XQqlUq/dZMnT86ll16ae+65R9+z3yjb92/bsmVLzj333JxxxhlZsWJFv+30PaPJuHHjcvDBBw+Ycdu6dat+ZlS58sor88gjj+SJJ57IscceWx1vaWlJ8taM9Pjx46vjjoH9kxBdA+PGjcu4cePed7tJkyalUqlk/fr1Oeuss5Ikb7zxRl566aUcf/zxSZIzzjgj3/3ud/Pyyy9XD8CVK1emUqlk0qRJ++5NwCCV7fv/+7//yw033FB9vGXLlpx//vl54IEHMmXKlCT6nv1H2b5Pks2bN+fcc8+tnnV00EH9Tw7T94wmhx56aCZNmpSurq589rOfrY53dXXlM5/5zDBWBkOjKIpceeWVeeihh/KrX/0qbW1t/da3tbWlpaUlXV1dOe2005K8da2AVatW5cYbbxyOkvkAhOgRpLGxMbNnz861116bCRMm5Pjjj89NN92UJLnkkkuSvHUBjlNOOSWzZs3KTTfdlNdeey3f+ta3cvnll6exsXE4y4e9ctxxx/V7fPjhhydJTjzxxOpfcPU9o82WLVsyffr0HHfccbn55pvzyiuvVNe9PVuh7xlt5s+fn1mzZmXy5MnVsy82btzY71oAsL+aO3du7r333jz88MNpaGionnXR1NSU+vr61NXVpaOjI52dnWlvb097e3s6OzszZsyYfrezZf8gRI8wN910Uw455JDMmjUrO3fuzJQpU/L444/nyCOPTJIcfPDBefTRRzNnzpyceeaZqa+vz8yZM3PzzTcPc+Ww7+h7RpuVK1fmhRdeyAsvvNDvdL/krdmMRN8z+nzhC1/IP/7xj1x//fV5+eWXM3HixDz22GPVs+1gf7Z8+fIkyfTp0/uN33333bnsssuSJAsWLMjOnTszZ86cbNu2LVOmTMnKlSvT0NBQ42r5oOqKt39aAwAAAO/J1bkBAACgJCEaAAAAShKiAQAAoCQhGgAAAEoSogEAAKAkIRoAAABKEqIBAACgJCEaAAAAShKiAQAAoCQhGgAAAEoSogEAAKCk/weNSQmDq/95tgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1200x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from azcausal.core.error import Placebo\n",
    "\n",
    "method = Placebo(n_samples=500)\n",
    "se, runs = method.run(result)\n",
    "\n",
    "# print out information about the estimate\n",
    "print(result.summary(percentage=False))\n",
    "\n",
    "plot_error_distribution(runs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5952186b",
   "metadata": {
    "tags": []
   },
   "source": [
    "### JackKnife"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "d69bb968-8991-49e3-ad49-112933eddee6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "╭──────────────────────────────────────────────────────────────────────────────╮\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "├──────────────────────────────────────────────────────────────────────────────┤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (±SE): -27.35 (±2.7671)                                              |\n",
      "|  Confidence Interval (95%): [-32.77 , -21.93]                           (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "╰──────────────────────────────────────────────────────────────────────────────╯\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(-27.349111083614964, 0.4549157915454204)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA8gAAADFCAYAAACIJNtBAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjYuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8o6BhiAAAACXBIWXMAAA9hAAAPYQGoP6dpAAASzUlEQVR4nO3dbWyV9d0H8G95KhXb8hS4IVQlbvMBMqdgjJKhoAGnZiPLnEbci42ZsCDIzBIflsWxLWvGXrhki0wdwzAnuGwhI5nT4TamDHAMWBi6ueA0PJUQp7aArAhc9wtve1ue5NSe09J+PsmVcP69Hn5X+Z1/z7fX6XWqiqIoAgAAAL1cn64uAAAAALoDARkAAAAiIAMAAEASARkAAACSCMgAAACQREAGAACAJAIyAAAAJEn6VfqAR48eze7du1NbW5uqqqpKHx4AAIBepiiK7Nu3L6NHj06fPie/TlzxgLx79+40NDRU+rAAAAD0cjt27MiYMWNO+vWKB+Ta2tok7xZWV1dX6cMDAFAOBw4ko0e/++/du5NBg7q2HoD3aWlpSUNDQ1sePZmKB+T33lZdV1cnIAMA9BR9+/7/v+vqBGSgW/qgP/N1ky4AAABIBwLyrl27cvvtt2fYsGE566yz8olPfCIbN24sR20AAABQMSW9xfrNN9/MpEmTMmXKlPz2t7/NiBEj8sorr2Tw4MFlKg8AAAAqo6SA/L3vfS8NDQ1ZsmRJ29h5553X2TUBAABAxZX0FuuVK1dm4sSJufnmmzNixIhceumlefTRR0+5TWtra1paWtotAAAA0N2UFJD//e9/Z9GiRfnoRz+aZ555JrNnz868efOydOnSk27T2NiY+vr6tsVnIAMA0NNUVVV2AcqjqiiK4nRXHjBgQCZOnJi1a9e2jc2bNy8bNmzIunXrTrhNa2trWltb2x6/9/lTzc3NPuYJAKCnOHAgOfvsd/+9f3+v+5inSofW038FDyTv5tD6+voPzKElXUEeNWpULr744nZjF110UbZv337Sbaqrq9s+89hnHwMAANBdlRSQJ02alJdffrnd2L/+9a+ce+65nVoUAAAAVFpJAfmrX/1q1q9fn+9+97vZtm1bnnjiiTzyyCOZM2dOueoDAACAiigpIF9++eVZsWJFli1blvHjx+fb3/52fvCDH2TmzJnlqg8AAAAqoqSbdHWG0/3jaAAAziBu0lVRbtIFpSnLTboAAACgpxKQAQAAIAIyAAAAJBGQAQAAIImADAAAAEkEZAAAAEgiIAMAAEASARkAAACSCMgAAACQREAGAACAJAIyAAAAJBGQAQAAIImADAAAAEkEZAAAAEgiIAMAAEASARkAAACSCMgAAACQREAGAACAJAIyAAAAJBGQAQAAIImADAAAAEkEZAAAAEgiIAMAAEASARkAAACSCMgAAACQREAGAACAJAIyAAAAJBGQAQAAIImADAAAAEkEZAAAAEgiIAMAAEASARkAAACSCMgAAACQREAGAACAJAIyAAAAJBGQAQAAIImADAAAAEkEZAAAAEjyIQNyY2NjqqqqMn/+/E4qBwAAALpGhwPyhg0b8sgjj+TjH/94Z9YDAAAAXaJDAXn//v2ZOXNmHn300QwZMqSzawIAAICK61BAnjNnTm688cZcd911H7hua2trWlpa2i0AAADQ3fQrdYPly5dn06ZN2bBhw2mt39jYmAULFpRcGABAb1VV1dUVlO6sJAf+79+Dzk7ePsl6RVGhggA6oKQryDt27Mhdd92Vxx9/PAMHDjytbe677740Nze3LTt27OhQoQAAAFBOJV1B3rhxY/bu3ZsJEya0jR05ciTPPfdcfvSjH6W1tTV9+/Ztt011dXWqq6s7p1oAAAAok5IC8rXXXpu///3v7ca++MUv5sILL8w999xzXDgGAACAM0VJAbm2tjbjx49vNzZo0KAMGzbsuHEAAAA4k3T4c5ABAACgJyn5LtbHWr16dSeUAQAAAF3LFWQAAACIgAwAAABJBGQAAABIIiADAABAEgEZAAAAkgjIAAAAkERABgAAgCQCMgAAACQRkAEAACCJgAwAAABJBGQAAABIIiADAABAEgEZAAAAkgjIAAAAkERABgAAgCQCMgAAACQRkAEAACBJ0q+rCwAAepaqqsodqygqdyw6h/7oHL6PUB6uIAMAAEAEZAAAAEgiIAMAAEASARkAAACSCMgAAACQREAGAACAJAIyAAAAJBGQAQAAIImADAAAAEkEZAAAAEgiIAMAAEASARkAAACSCMgAAACQREAGAACAJAIyAAAAJBGQAQAAIImADAAAAEkEZAAAAEgiIAMAAEASARkAAACSlBiQGxsbc/nll6e2tjYjRozIjBkz8vLLL5erNgAAAKiYkgLyn/70p8yZMyfr16/P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",
      "text/plain": [
       "<Figure size 1200x200 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from azcausal.core.error import JackKnife\n",
    "\n",
    "method = JackKnife()\n",
    "se, runs = method.run(result)\n",
    "\n",
    "# print out information about the estimate\n",
    "print(result.summary(percentage=False))\n",
    "\n",
    "plot_error_distribution(runs)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 11.359422,
   "end_time": "2023-09-28T19:27:31.638604",
   "environment_variables": {},
   "exception": null,
   "input_path": "/Users/blankjul/workspace/azcausal/docs/source/error.ipynb",
   "output_path": "/Users/blankjul/workspace/azcausal/docs/source/error.ipynb",
   "parameters": {},
   "start_time": "2023-09-28T19:27:20.279182",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
