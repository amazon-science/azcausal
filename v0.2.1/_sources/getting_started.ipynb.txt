{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c5579eee",
   "metadata": {
    "papermill": {
     "duration": 0.005026,
     "end_time": "2023-12-08T20:52:17.162778",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.157752",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Getting Started"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da38288e-7beb-4a9f-9fbf-7b07e77a1ffb",
   "metadata": {
    "papermill": {
     "duration": 0.004574,
     "end_time": "2023-12-08T20:52:17.171920",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.167346",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This guide covers the steps to get started with **azcausal**. \n",
    "We have split this introduction into several parts:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57764f30-7fa8-4686-ba9c-3dc86f017849",
   "metadata": {
    "papermill": {
     "duration": 0.004423,
     "end_time": "2023-12-08T20:52:17.180777",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.176354",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- Part I : **The Panel**\n",
    "- Part II: **The Treatment Effect**\n",
    "- Part III: **Analysis & Visualization**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b06e1e39-814c-4fc4-825b-a30bf1afa3a8",
   "metadata": {
    "papermill": {
     "duration": 0.004449,
     "end_time": "2023-12-08T20:52:17.189659",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.185210",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Part I: Causal Panel"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b49040e-0a2b-4113-8897-ef9103794bf2",
   "metadata": {
    "papermill": {
     "duration": 0.004462,
     "end_time": "2023-12-08T20:52:17.198560",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.194098",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The very first step before doing any causal inference is get loading the data and tranforming them in the right format. Most estimators in this framework require the data to be in form of a `Panel` object. \n",
    "\n",
    "Assuming we have the following data frame representing the `CaliforniaProp99` information:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "11b31c83-3403-4223-a9dc-4ebf5fb25b3d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.208819Z",
     "iopub.status.busy": "2023-12-08T20:52:17.208456Z",
     "iopub.status.idle": "2023-12-08T20:52:17.456127Z",
     "shell.execute_reply": "2023-12-08T20:52:17.455142Z"
    },
    "papermill": {
     "duration": 0.254709,
     "end_time": "2023-12-08T20:52:17.457733",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.203024",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>State</th>\n",
       "      <th>Year</th>\n",
       "      <th>PacksPerCapita</th>\n",
       "      <th>treated</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Alabama</td>\n",
       "      <td>1970</td>\n",
       "      <td>89.800003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Arkansas</td>\n",
       "      <td>1970</td>\n",
       "      <td>100.300003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Colorado</td>\n",
       "      <td>1970</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Connecticut</td>\n",
       "      <td>1970</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Delaware</td>\n",
       "      <td>1970</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1204</th>\n",
       "      <td>Virginia</td>\n",
       "      <td>2000</td>\n",
       "      <td>96.699997</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1205</th>\n",
       "      <td>West Virginia</td>\n",
       "      <td>2000</td>\n",
       "      <td>107.900002</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1206</th>\n",
       "      <td>Wisconsin</td>\n",
       "      <td>2000</td>\n",
       "      <td>80.099998</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1207</th>\n",
       "      <td>Wyoming</td>\n",
       "      <td>2000</td>\n",
       "      <td>90.500000</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1208</th>\n",
       "      <td>California</td>\n",
       "      <td>2000</td>\n",
       "      <td>41.599998</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1209 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              State  Year  PacksPerCapita  treated\n",
       "0           Alabama  1970       89.800003        0\n",
       "1          Arkansas  1970      100.300003        0\n",
       "2          Colorado  1970      124.800003        0\n",
       "3       Connecticut  1970      120.000000        0\n",
       "4          Delaware  1970      155.000000        0\n",
       "...             ...   ...             ...      ...\n",
       "1204       Virginia  2000       96.699997        0\n",
       "1205  West Virginia  2000      107.900002        0\n",
       "1206      Wisconsin  2000       80.099998        0\n",
       "1207        Wyoming  2000       90.500000        0\n",
       "1208     California  2000       41.599998        1\n",
       "\n",
       "[1209 rows x 4 columns]"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from azcausal.data import CaliforniaProp99\n",
    "\n",
    "df = CaliforniaProp99().df()\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d08ef0b7-e0f2-443b-b207-9720ecca5cd5",
   "metadata": {
    "papermill": {
     "duration": 0.006044,
     "end_time": "2023-12-08T20:52:17.470998",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.464954",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In this example, the columns represent the following:\n",
    "\n",
    "+ The **units**: are given by each state (`State`)\n",
    "+ The **time**: is represented in years (`Year`)\n",
    "+ The **outcome** is the number of packs sold (`PacksPerCapita`)\n",
    "+ The **intervention** is indicated by the binary treatment column (`treated`)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92fa9eff-5019-42e3-8d1d-0d43d90446dd",
   "metadata": {
    "papermill": {
     "duration": 0.004771,
     "end_time": "2023-12-08T20:52:17.480747",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.475976",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "We define a `Panel` as a data frame where the index represents `time` and each column a `unit`. We can extract the `outcome` from the data frame by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80f46a22-55ce-4f78-af2b-2ba10f851dbc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.491382Z",
     "iopub.status.busy": "2023-12-08T20:52:17.491032Z",
     "iopub.status.idle": "2023-12-08T20:52:17.508608Z",
     "shell.execute_reply": "2023-12-08T20:52:17.508021Z"
    },
    "papermill": {
     "duration": 0.024235,
     "end_time": "2023-12-08T20:52:17.509763",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.485528",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "      <th>Colorado</th>\n",
       "      <th>Connecticut</th>\n",
       "      <th>Delaware</th>\n",
       "      <th>Georgia</th>\n",
       "      <th>Idaho</th>\n",
       "      <th>Illinois</th>\n",
       "      <th>Indiana</th>\n",
       "      <th>...</th>\n",
       "      <th>South Carolina</th>\n",
       "      <th>South Dakota</th>\n",
       "      <th>Tennessee</th>\n",
       "      <th>Texas</th>\n",
       "      <th>Utah</th>\n",
       "      <th>Vermont</th>\n",
       "      <th>Virginia</th>\n",
       "      <th>West Virginia</th>\n",
       "      <th>Wisconsin</th>\n",
       "      <th>Wyoming</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970</th>\n",
       "      <td>89.800003</td>\n",
       "      <td>100.300003</td>\n",
       "      <td>123.0</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>109.900002</td>\n",
       "      <td>102.400002</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>134.600006</td>\n",
       "      <td>...</td>\n",
       "      <td>103.599998</td>\n",
       "      <td>92.699997</td>\n",
       "      <td>99.800003</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>65.500000</td>\n",
       "      <td>122.599998</td>\n",
       "      <td>124.300003</td>\n",
       "      <td>114.5</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>132.199997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971</th>\n",
       "      <td>95.400002</td>\n",
       "      <td>104.099998</td>\n",
       "      <td>121.0</td>\n",
       "      <td>125.500000</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>161.100006</td>\n",
       "      <td>115.699997</td>\n",
       "      <td>108.500000</td>\n",
       "      <td>125.599998</td>\n",
       "      <td>139.300003</td>\n",
       "      <td>...</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>96.699997</td>\n",
       "      <td>106.300003</td>\n",
       "      <td>108.900002</td>\n",
       "      <td>67.699997</td>\n",
       "      <td>124.400002</td>\n",
       "      <td>128.399994</td>\n",
       "      <td>111.5</td>\n",
       "      <td>105.400002</td>\n",
       "      <td>131.699997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972</th>\n",
       "      <td>101.099998</td>\n",
       "      <td>103.900002</td>\n",
       "      <td>123.5</td>\n",
       "      <td>134.300003</td>\n",
       "      <td>110.800003</td>\n",
       "      <td>156.300003</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>126.099998</td>\n",
       "      <td>126.599998</td>\n",
       "      <td>149.199997</td>\n",
       "      <td>...</td>\n",
       "      <td>118.699997</td>\n",
       "      <td>103.000000</td>\n",
       "      <td>111.500000</td>\n",
       "      <td>108.599998</td>\n",
       "      <td>71.300003</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>117.5</td>\n",
       "      <td>108.800003</td>\n",
       "      <td>140.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "State     Alabama    Arkansas  California    Colorado  Connecticut  \\\n",
       "Year                                                                 \n",
       "1970    89.800003  100.300003       123.0  124.800003   120.000000   \n",
       "1971    95.400002  104.099998       121.0  125.500000   117.599998   \n",
       "1972   101.099998  103.900002       123.5  134.300003   110.800003   \n",
       "\n",
       "State    Delaware     Georgia       Idaho    Illinois     Indiana  ...  \\\n",
       "Year                                                               ...   \n",
       "1970   155.000000  109.900002  102.400002  124.800003  134.600006  ...   \n",
       "1971   161.100006  115.699997  108.500000  125.599998  139.300003  ...   \n",
       "1972   156.300003  117.000000  126.099998  126.599998  149.199997  ...   \n",
       "\n",
       "State  South Carolina  South Dakota   Tennessee       Texas       Utah  \\\n",
       "Year                                                                     \n",
       "1970       103.599998     92.699997   99.800003  106.400002  65.500000   \n",
       "1971       115.000000     96.699997  106.300003  108.900002  67.699997   \n",
       "1972       118.699997    103.000000  111.500000  108.599998  71.300003   \n",
       "\n",
       "State     Vermont    Virginia  West Virginia   Wisconsin     Wyoming  \n",
       "Year                                                                  \n",
       "1970   122.599998  124.300003          114.5  106.400002  132.199997  \n",
       "1971   124.400002  128.399994          111.5  105.400002  131.699997  \n",
       "1972   138.000000  137.000000          117.5  108.800003  140.000000  \n",
       "\n",
       "[3 rows x 39 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from azcausal.util import to_panel\n",
    "\n",
    "outcome = to_panel(df, \"Year\", \"State\", \"PacksPerCapita\")\n",
    "\n",
    "outcome.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5095bb12-819b-418c-bc35-976f17e4e655",
   "metadata": {
    "papermill": {
     "duration": 0.004894,
     "end_time": "2023-12-08T20:52:17.519826",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.514932",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To check whether the panel data are in fact balanced (we have an entry during each time step for each unit), we can check for `NaN` values in the data frame:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5fb62ec0-134a-4cd0-83d2-c307dd9b303b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.530913Z",
     "iopub.status.busy": "2023-12-08T20:52:17.530472Z",
     "iopub.status.idle": "2023-12-08T20:52:17.534108Z",
     "shell.execute_reply": "2023-12-08T20:52:17.533545Z"
    },
    "papermill": {
     "duration": 0.010435,
     "end_time": "2023-12-08T20:52:17.535271",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.524836",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is Balanced: True\n"
     ]
    }
   ],
   "source": [
    "print(\"Is Balanced:\", (~outcome.isna()).all(axis=None))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a18b2a9-0167-44ff-b38d-56a44964c219",
   "metadata": {
    "papermill": {
     "duration": 0.005144,
     "end_time": "2023-12-08T20:52:17.545646",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.540502",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let us simulated some data would be missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4b5c4bfb-9db2-442e-bf4e-047e06330238",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.556968Z",
     "iopub.status.busy": "2023-12-08T20:52:17.556585Z",
     "iopub.status.idle": "2023-12-08T20:52:17.572564Z",
     "shell.execute_reply": "2023-12-08T20:52:17.572065Z"
    },
    "papermill": {
     "duration": 0.022893,
     "end_time": "2023-12-08T20:52:17.573678",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.550785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is Balanced: False\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "      <th>Colorado</th>\n",
       "      <th>Connecticut</th>\n",
       "      <th>Delaware</th>\n",
       "      <th>Georgia</th>\n",
       "      <th>Idaho</th>\n",
       "      <th>Illinois</th>\n",
       "      <th>Indiana</th>\n",
       "      <th>...</th>\n",
       "      <th>South Carolina</th>\n",
       "      <th>South Dakota</th>\n",
       "      <th>Tennessee</th>\n",
       "      <th>Texas</th>\n",
       "      <th>Utah</th>\n",
       "      <th>Vermont</th>\n",
       "      <th>Virginia</th>\n",
       "      <th>West Virginia</th>\n",
       "      <th>Wisconsin</th>\n",
       "      <th>Wyoming</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970</th>\n",
       "      <td>89.800003</td>\n",
       "      <td>100.300003</td>\n",
       "      <td>123.0</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>109.900002</td>\n",
       "      <td>102.400002</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>134.600006</td>\n",
       "      <td>...</td>\n",
       "      <td>103.599998</td>\n",
       "      <td>92.699997</td>\n",
       "      <td>99.800003</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>65.500000</td>\n",
       "      <td>122.599998</td>\n",
       "      <td>124.300003</td>\n",
       "      <td>114.5</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>132.199997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971</th>\n",
       "      <td>95.400002</td>\n",
       "      <td>104.099998</td>\n",
       "      <td>121.0</td>\n",
       "      <td>125.500000</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>161.100006</td>\n",
       "      <td>115.699997</td>\n",
       "      <td>108.500000</td>\n",
       "      <td>125.599998</td>\n",
       "      <td>139.300003</td>\n",
       "      <td>...</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>96.699997</td>\n",
       "      <td>106.300003</td>\n",
       "      <td>108.900002</td>\n",
       "      <td>67.699997</td>\n",
       "      <td>124.400002</td>\n",
       "      <td>128.399994</td>\n",
       "      <td>111.5</td>\n",
       "      <td>105.400002</td>\n",
       "      <td>131.699997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972</th>\n",
       "      <td>101.099998</td>\n",
       "      <td>103.900002</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "State     Alabama    Arkansas  California    Colorado  Connecticut  \\\n",
       "Year                                                                 \n",
       "1970    89.800003  100.300003       123.0  124.800003   120.000000   \n",
       "1971    95.400002  104.099998       121.0  125.500000   117.599998   \n",
       "1972   101.099998  103.900002         NaN         NaN          NaN   \n",
       "\n",
       "State    Delaware     Georgia       Idaho    Illinois     Indiana  ...  \\\n",
       "Year                                                               ...   \n",
       "1970   155.000000  109.900002  102.400002  124.800003  134.600006  ...   \n",
       "1971   161.100006  115.699997  108.500000  125.599998  139.300003  ...   \n",
       "1972          NaN         NaN         NaN         NaN         NaN  ...   \n",
       "\n",
       "State  South Carolina  South Dakota   Tennessee       Texas       Utah  \\\n",
       "Year                                                                     \n",
       "1970       103.599998     92.699997   99.800003  106.400002  65.500000   \n",
       "1971       115.000000     96.699997  106.300003  108.900002  67.699997   \n",
       "1972              NaN           NaN         NaN         NaN        NaN   \n",
       "\n",
       "State     Vermont    Virginia  West Virginia   Wisconsin     Wyoming  \n",
       "Year                                                                  \n",
       "1970   122.599998  124.300003          114.5  106.400002  132.199997  \n",
       "1971   124.400002  128.399994          111.5  105.400002  131.699997  \n",
       "1972          NaN         NaN            NaN         NaN         NaN  \n",
       "\n",
       "[3 rows x 39 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not_balanced = to_panel(df.head(80), \"Year\", \"State\", \"PacksPerCapita\")\n",
    "print(\"Is Balanced:\", (~not_balanced.isna()).all(axis=None))\n",
    "\n",
    "not_balanced.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f83b7973-e05c-4a79-8d98-2c1cf1f48b5d",
   "metadata": {
    "papermill": {
     "duration": 0.00917,
     "end_time": "2023-12-08T20:52:17.588354",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.579184",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Instead of extacting only one value at a time, we can also extract multiple directly by "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5050c0b5-3c4f-4bb8-865f-af45e98c08d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.605526Z",
     "iopub.status.busy": "2023-12-08T20:52:17.605348Z",
     "iopub.status.idle": "2023-12-08T20:52:17.617450Z",
     "shell.execute_reply": "2023-12-08T20:52:17.616538Z"
    },
    "papermill": {
     "duration": 0.022303,
     "end_time": "2023-12-08T20:52:17.619141",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.596838",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['PacksPerCapita', 'treated'])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from azcausal.util import to_panels\n",
    "\n",
    "data = to_panels(df, \"Year\", \"State\", [\"PacksPerCapita\", \"treated\"])\n",
    "\n",
    "data.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c26f061-7b8d-416d-9696-9e135753ed75",
   "metadata": {
    "papermill": {
     "duration": 0.005398,
     "end_time": "2023-12-08T20:52:17.633796",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.628398",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The reason why we have introduced an object called `Panel` is to combine multiple data frames into one and to have convinient access to information about the time pre and post experiment, as well as control and treatment units. A Panel can be created by passing the *outcome* and *intervention* directly as `pd.DataFrame`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d5c481e7-4fb8-439b-91ca-883aa325b61a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.645650Z",
     "iopub.status.busy": "2023-12-08T20:52:17.645305Z",
     "iopub.status.idle": "2023-12-08T20:52:17.650897Z",
     "shell.execute_reply": "2023-12-08T20:52:17.650322Z"
    },
    "papermill": {
     "duration": 0.012695,
     "end_time": "2023-12-08T20:52:17.652030",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.639335",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.core.panel import CausalPanel\n",
    "\n",
    "panel = CausalPanel(data=data).setup(outcome='PacksPerCapita', intervention='treated')\n",
    "\n",
    "print(panel.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1259c0f7-8006-4325-98d3-8dc273cf66fa",
   "metadata": {
    "papermill": {
     "duration": 0.005542,
     "end_time": "2023-12-08T20:52:17.663136",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.657594",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The panel allows accessing `outcome` and `intervention` directly trough properties:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ed87e5c6-db29-4f20-9cdc-f772a7448247",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.675151Z",
     "iopub.status.busy": "2023-12-08T20:52:17.674791Z",
     "iopub.status.idle": "2023-12-08T20:52:17.687361Z",
     "shell.execute_reply": "2023-12-08T20:52:17.686878Z"
    },
    "papermill": {
     "duration": 0.019834,
     "end_time": "2023-12-08T20:52:17.688503",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.668669",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "      <th>Colorado</th>\n",
       "      <th>Connecticut</th>\n",
       "      <th>Delaware</th>\n",
       "      <th>Georgia</th>\n",
       "      <th>Idaho</th>\n",
       "      <th>Illinois</th>\n",
       "      <th>Indiana</th>\n",
       "      <th>...</th>\n",
       "      <th>South Carolina</th>\n",
       "      <th>South Dakota</th>\n",
       "      <th>Tennessee</th>\n",
       "      <th>Texas</th>\n",
       "      <th>Utah</th>\n",
       "      <th>Vermont</th>\n",
       "      <th>Virginia</th>\n",
       "      <th>West Virginia</th>\n",
       "      <th>Wisconsin</th>\n",
       "      <th>Wyoming</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970</th>\n",
       "      <td>89.800003</td>\n",
       "      <td>100.300003</td>\n",
       "      <td>123.0</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>109.900002</td>\n",
       "      <td>102.400002</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>134.600006</td>\n",
       "      <td>...</td>\n",
       "      <td>103.599998</td>\n",
       "      <td>92.699997</td>\n",
       "      <td>99.800003</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>65.500000</td>\n",
       "      <td>122.599998</td>\n",
       "      <td>124.300003</td>\n",
       "      <td>114.5</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>132.199997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971</th>\n",
       "      <td>95.400002</td>\n",
       "      <td>104.099998</td>\n",
       "      <td>121.0</td>\n",
       "      <td>125.500000</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>161.100006</td>\n",
       "      <td>115.699997</td>\n",
       "      <td>108.500000</td>\n",
       "      <td>125.599998</td>\n",
       "      <td>139.300003</td>\n",
       "      <td>...</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>96.699997</td>\n",
       "      <td>106.300003</td>\n",
       "      <td>108.900002</td>\n",
       "      <td>67.699997</td>\n",
       "      <td>124.400002</td>\n",
       "      <td>128.399994</td>\n",
       "      <td>111.5</td>\n",
       "      <td>105.400002</td>\n",
       "      <td>131.699997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972</th>\n",
       "      <td>101.099998</td>\n",
       "      <td>103.900002</td>\n",
       "      <td>123.5</td>\n",
       "      <td>134.300003</td>\n",
       "      <td>110.800003</td>\n",
       "      <td>156.300003</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>126.099998</td>\n",
       "      <td>126.599998</td>\n",
       "      <td>149.199997</td>\n",
       "      <td>...</td>\n",
       "      <td>118.699997</td>\n",
       "      <td>103.000000</td>\n",
       "      <td>111.500000</td>\n",
       "      <td>108.599998</td>\n",
       "      <td>71.300003</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>117.5</td>\n",
       "      <td>108.800003</td>\n",
       "      <td>140.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "State     Alabama    Arkansas  California    Colorado  Connecticut  \\\n",
       "Year                                                                 \n",
       "1970    89.800003  100.300003       123.0  124.800003   120.000000   \n",
       "1971    95.400002  104.099998       121.0  125.500000   117.599998   \n",
       "1972   101.099998  103.900002       123.5  134.300003   110.800003   \n",
       "\n",
       "State    Delaware     Georgia       Idaho    Illinois     Indiana  ...  \\\n",
       "Year                                                               ...   \n",
       "1970   155.000000  109.900002  102.400002  124.800003  134.600006  ...   \n",
       "1971   161.100006  115.699997  108.500000  125.599998  139.300003  ...   \n",
       "1972   156.300003  117.000000  126.099998  126.599998  149.199997  ...   \n",
       "\n",
       "State  South Carolina  South Dakota   Tennessee       Texas       Utah  \\\n",
       "Year                                                                     \n",
       "1970       103.599998     92.699997   99.800003  106.400002  65.500000   \n",
       "1971       115.000000     96.699997  106.300003  108.900002  67.699997   \n",
       "1972       118.699997    103.000000  111.500000  108.599998  71.300003   \n",
       "\n",
       "State     Vermont    Virginia  West Virginia   Wisconsin     Wyoming  \n",
       "Year                                                                  \n",
       "1970   122.599998  124.300003          114.5  106.400002  132.199997  \n",
       "1971   124.400002  128.399994          111.5  105.400002  131.699997  \n",
       "1972   138.000000  137.000000          117.5  108.800003  140.000000  \n",
       "\n",
       "[3 rows x 39 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "panel.outcome.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a910c189-8577-440e-af7a-960f2ac72e46",
   "metadata": {
    "papermill": {
     "duration": 0.005655,
     "end_time": "2023-12-08T20:52:17.700018",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.694363",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "or using the index function by"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "701077cd-1835-4b54-94e1-c6faefc29ed9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.712414Z",
     "iopub.status.busy": "2023-12-08T20:52:17.712029Z",
     "iopub.status.idle": "2023-12-08T20:52:17.724393Z",
     "shell.execute_reply": "2023-12-08T20:52:17.723859Z"
    },
    "papermill": {
     "duration": 0.019852,
     "end_time": "2023-12-08T20:52:17.725546",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.705694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "      <th>Colorado</th>\n",
       "      <th>Connecticut</th>\n",
       "      <th>Delaware</th>\n",
       "      <th>Georgia</th>\n",
       "      <th>Idaho</th>\n",
       "      <th>Illinois</th>\n",
       "      <th>Indiana</th>\n",
       "      <th>...</th>\n",
       "      <th>South Carolina</th>\n",
       "      <th>South Dakota</th>\n",
       "      <th>Tennessee</th>\n",
       "      <th>Texas</th>\n",
       "      <th>Utah</th>\n",
       "      <th>Vermont</th>\n",
       "      <th>Virginia</th>\n",
       "      <th>West Virginia</th>\n",
       "      <th>Wisconsin</th>\n",
       "      <th>Wyoming</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970</th>\n",
       "      <td>89.800003</td>\n",
       "      <td>100.300003</td>\n",
       "      <td>123.0</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>120.000000</td>\n",
       "      <td>155.000000</td>\n",
       "      <td>109.900002</td>\n",
       "      <td>102.400002</td>\n",
       "      <td>124.800003</td>\n",
       "      <td>134.600006</td>\n",
       "      <td>...</td>\n",
       "      <td>103.599998</td>\n",
       "      <td>92.699997</td>\n",
       "      <td>99.800003</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>65.500000</td>\n",
       "      <td>122.599998</td>\n",
       "      <td>124.300003</td>\n",
       "      <td>114.5</td>\n",
       "      <td>106.400002</td>\n",
       "      <td>132.199997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971</th>\n",
       "      <td>95.400002</td>\n",
       "      <td>104.099998</td>\n",
       "      <td>121.0</td>\n",
       "      <td>125.500000</td>\n",
       "      <td>117.599998</td>\n",
       "      <td>161.100006</td>\n",
       "      <td>115.699997</td>\n",
       "      <td>108.500000</td>\n",
       "      <td>125.599998</td>\n",
       "      <td>139.300003</td>\n",
       "      <td>...</td>\n",
       "      <td>115.000000</td>\n",
       "      <td>96.699997</td>\n",
       "      <td>106.300003</td>\n",
       "      <td>108.900002</td>\n",
       "      <td>67.699997</td>\n",
       "      <td>124.400002</td>\n",
       "      <td>128.399994</td>\n",
       "      <td>111.5</td>\n",
       "      <td>105.400002</td>\n",
       "      <td>131.699997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972</th>\n",
       "      <td>101.099998</td>\n",
       "      <td>103.900002</td>\n",
       "      <td>123.5</td>\n",
       "      <td>134.300003</td>\n",
       "      <td>110.800003</td>\n",
       "      <td>156.300003</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>126.099998</td>\n",
       "      <td>126.599998</td>\n",
       "      <td>149.199997</td>\n",
       "      <td>...</td>\n",
       "      <td>118.699997</td>\n",
       "      <td>103.000000</td>\n",
       "      <td>111.500000</td>\n",
       "      <td>108.599998</td>\n",
       "      <td>71.300003</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>117.5</td>\n",
       "      <td>108.800003</td>\n",
       "      <td>140.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "State     Alabama    Arkansas  California    Colorado  Connecticut  \\\n",
       "Year                                                                 \n",
       "1970    89.800003  100.300003       123.0  124.800003   120.000000   \n",
       "1971    95.400002  104.099998       121.0  125.500000   117.599998   \n",
       "1972   101.099998  103.900002       123.5  134.300003   110.800003   \n",
       "\n",
       "State    Delaware     Georgia       Idaho    Illinois     Indiana  ...  \\\n",
       "Year                                                               ...   \n",
       "1970   155.000000  109.900002  102.400002  124.800003  134.600006  ...   \n",
       "1971   161.100006  115.699997  108.500000  125.599998  139.300003  ...   \n",
       "1972   156.300003  117.000000  126.099998  126.599998  149.199997  ...   \n",
       "\n",
       "State  South Carolina  South Dakota   Tennessee       Texas       Utah  \\\n",
       "Year                                                                     \n",
       "1970       103.599998     92.699997   99.800003  106.400002  65.500000   \n",
       "1971       115.000000     96.699997  106.300003  108.900002  67.699997   \n",
       "1972       118.699997    103.000000  111.500000  108.599998  71.300003   \n",
       "\n",
       "State     Vermont    Virginia  West Virginia   Wisconsin     Wyoming  \n",
       "Year                                                                  \n",
       "1970   122.599998  124.300003          114.5  106.400002  132.199997  \n",
       "1971   124.400002  128.399994          111.5  105.400002  131.699997  \n",
       "1972   138.000000  137.000000          117.5  108.800003  140.000000  \n",
       "\n",
       "[3 rows x 39 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "panel['outcome'].head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f1d1821c-b095-4179-8628-0ed95c4edfac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.738522Z",
     "iopub.status.busy": "2023-12-08T20:52:17.738186Z",
     "iopub.status.idle": "2023-12-08T20:52:17.747357Z",
     "shell.execute_reply": "2023-12-08T20:52:17.746876Z"
    },
    "papermill": {
     "duration": 0.016923,
     "end_time": "2023-12-08T20:52:17.748543",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.731620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "      <th>Colorado</th>\n",
       "      <th>Connecticut</th>\n",
       "      <th>Delaware</th>\n",
       "      <th>Georgia</th>\n",
       "      <th>Idaho</th>\n",
       "      <th>Illinois</th>\n",
       "      <th>Indiana</th>\n",
       "      <th>...</th>\n",
       "      <th>South Carolina</th>\n",
       "      <th>South Dakota</th>\n",
       "      <th>Tennessee</th>\n",
       "      <th>Texas</th>\n",
       "      <th>Utah</th>\n",
       "      <th>Vermont</th>\n",
       "      <th>Virginia</th>\n",
       "      <th>West Virginia</th>\n",
       "      <th>Wisconsin</th>\n",
       "      <th>Wyoming</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows Ã— 39 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "State  Alabama  Arkansas  California  Colorado  Connecticut  Delaware  \\\n",
       "Year                                                                    \n",
       "1998         0         0           1         0            0         0   \n",
       "1999         0         0           1         0            0         0   \n",
       "2000         0         0           1         0            0         0   \n",
       "\n",
       "State  Georgia  Idaho  Illinois  Indiana  ...  South Carolina  South Dakota  \\\n",
       "Year                                      ...                                 \n",
       "1998         0      0         0        0  ...               0             0   \n",
       "1999         0      0         0        0  ...               0             0   \n",
       "2000         0      0         0        0  ...               0             0   \n",
       "\n",
       "State  Tennessee  Texas  Utah  Vermont  Virginia  West Virginia  Wisconsin  \\\n",
       "Year                                                                         \n",
       "1998           0      0     0        0         0              0          0   \n",
       "1999           0      0     0        0         0              0          0   \n",
       "2000           0      0     0        0         0              0          0   \n",
       "\n",
       "State  Wyoming  \n",
       "Year            \n",
       "1998         0  \n",
       "1999         0  \n",
       "2000         0  \n",
       "\n",
       "[3 rows x 39 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "panel.intervention.tail(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75911b9d-696c-4128-aef6-5ca086dd5b47",
   "metadata": {
    "papermill": {
     "duration": 0.006013,
     "end_time": "2023-12-08T20:52:17.760781",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.754768",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Moreover, the method also allows to use the most common `pandas` functions on ALL DATA at once:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4c62b0d1-74c4-463b-b99c-c6bf31638cfa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.773973Z",
     "iopub.status.busy": "2023-12-08T20:52:17.773524Z",
     "iopub.status.idle": "2023-12-08T20:52:17.779782Z",
     "shell.execute_reply": "2023-12-08T20:52:17.779237Z"
    },
    "papermill": {
     "duration": 0.014172,
     "end_time": "2023-12-08T20:52:17.781018",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.766846",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>Alabama</th>\n",
       "      <th>Arkansas</th>\n",
       "      <th>California</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970</th>\n",
       "      <td>89.800003</td>\n",
       "      <td>100.300003</td>\n",
       "      <td>123.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971</th>\n",
       "      <td>95.400002</td>\n",
       "      <td>104.099998</td>\n",
       "      <td>121.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972</th>\n",
       "      <td>101.099998</td>\n",
       "      <td>103.900002</td>\n",
       "      <td>123.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "State     Alabama    Arkansas  California\n",
       "Year                                     \n",
       "1970    89.800003  100.300003       123.0\n",
       "1971    95.400002  104.099998       121.0\n",
       "1972   101.099998  103.900002       123.5"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_panel = panel.iloc[:, :3]\n",
    "\n",
    "new_panel.outcome.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe25f4f2-a620-4092-95f9-d85410e3c9a7",
   "metadata": {
    "papermill": {
     "duration": 0.006129,
     "end_time": "2023-12-08T20:52:17.793417",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.787288",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Also, we can use the `get` method with key word arguments. \n",
    "\n",
    "* if `contr == True` then only control units are returned.\n",
    "* if `treat == True` then units which have been treated at least once are returned.\n",
    "* if `pre == True` then time steps where no unit is treated is returned.\n",
    "* if `post == True` then the time steps where at least one unit is treated.\n",
    "\n",
    ", for example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d1343088-0239-4f3d-a366-e81fd2288e21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.806889Z",
     "iopub.status.busy": "2023-12-08T20:52:17.806536Z",
     "iopub.status.idle": "2023-12-08T20:52:17.812057Z",
     "shell.execute_reply": "2023-12-08T20:52:17.811490Z"
    },
    "papermill": {
     "duration": 0.013535,
     "end_time": "2023-12-08T20:52:17.813229",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.799694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>State</th>\n",
       "      <th>California</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1989</th>\n",
       "      <td>82.400002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1990</th>\n",
       "      <td>77.800003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1991</th>\n",
       "      <td>68.699997</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "State  California\n",
       "Year             \n",
       "1989    82.400002\n",
       "1990    77.800003\n",
       "1991    68.699997"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "panel.filter(target='outcome', post=True, treat=True).head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1de8e2c2-96fa-4de5-b40c-9c45b15ab480",
   "metadata": {
    "papermill": {
     "duration": 0.006284,
     "end_time": "2023-12-08T20:52:17.825890",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.819606",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For more methods please check the `Panel` immplementation directly."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3dfa728-97bb-4323-93bd-5e8d9a07eb56",
   "metadata": {
    "papermill": {
     "duration": 0.006592,
     "end_time": "2023-12-08T20:52:17.838822",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.832230",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Using the `CausalPanel` it is also relatively easy to plot the average control versus treatment by:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e1c51b3c-5270-44e7-b13c-f059c2619bec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:17.852439Z",
     "iopub.status.busy": "2023-12-08T20:52:17.852053Z",
     "iopub.status.idle": "2023-12-08T20:52:18.602408Z",
     "shell.execute_reply": "2023-12-08T20:52:18.601884Z"
    },
    "papermill": {
     "duration": 0.758452,
     "end_time": "2023-12-08T20:52:18.603605",
     "exception": false,
     "start_time": "2023-12-08T20:52:17.845153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x7fd4bda4c4c0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "sns.set(rc={'figure.figsize':(12,4)})\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "avg_control = panel.filter(target='outcome', contr=True).mean(axis=1).to_frame('C')\n",
    "avg_treat = panel.filter(target='outcome', treat=True).mean(axis=1).to_frame('T')\n",
    "\n",
    "plt.subplots(1, 1, figsize=(12, 4))\n",
    "sns.lineplot(avg_control.join(avg_treat))\n",
    "plt.axvline(panel.filter(target=\"intervention\", pre=True).index.max(), color='black', label='intervention')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "641ebeeb-d0dc-435e-88b4-92aab3346a08",
   "metadata": {
    "papermill": {
     "duration": 0.006869,
     "end_time": "2023-12-08T20:52:18.617669",
     "exception": false,
     "start_time": "2023-12-08T20:52:18.610800",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Part II: The Treatment Effect"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "778a4249-e435-48c6-aad1-a60ea6231182",
   "metadata": {
    "papermill": {
     "duration": 0.006843,
     "end_time": "2023-12-08T20:52:18.631467",
     "exception": false,
     "start_time": "2023-12-08T20:52:18.624624",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "After bringing the data into the right format, we can use an `Estimator` to make predictions of the treatment effect. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b7f8574-9b70-4834-8aea-0d1d3841ce6a",
   "metadata": {
    "papermill": {
     "duration": 0.006894,
     "end_time": "2023-12-08T20:52:18.645244",
     "exception": false,
     "start_time": "2023-12-08T20:52:18.638350",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Like commonly done for time series it is always a good idea to quickly spot check the time series:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "37ed69c1-d7cc-4e2b-a42e-8f97001ba208",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:18.660222Z",
     "iopub.status.busy": "2023-12-08T20:52:18.659775Z",
     "iopub.status.idle": "2023-12-08T20:52:18.859270Z",
     "shell.execute_reply": "2023-12-08T20:52:18.858750Z"
    },
    "papermill": {
     "duration": 0.208338,
     "end_time": "2023-12-08T20:52:18.860519",
     "exception": false,
     "start_time": "2023-12-08T20:52:18.652181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Year'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(panel.summary())\n",
    "\n",
    "panel.outcome.mean(axis=1).plot(figsize=(12, 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3aa51e1-241c-458c-89c2-d31f02b559e7",
   "metadata": {
    "papermill": {
     "duration": 0.007599,
     "end_time": "2023-12-08T20:52:18.876107",
     "exception": false,
     "start_time": "2023-12-08T20:52:18.868508",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For example, let us use the popular `DID` estimator to estimate the *Average Treatment Effect on the Treated (ATT)* for the panel data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b1a08910-e0ee-4416-a2b0-827635281080",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:18.892387Z",
     "iopub.status.busy": "2023-12-08T20:52:18.892166Z",
     "iopub.status.idle": "2023-12-08T20:52:19.032979Z",
     "shell.execute_reply": "2023-12-08T20:52:19.032433Z"
    },
    "papermill": {
     "duration": 0.150445,
     "end_time": "2023-12-08T20:52:19.034235",
     "exception": false,
     "start_time": "2023-12-08T20:52:18.883790",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                     ATT                                      |\n",
      "|  Effect: -27.35                                                              |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                  Percentage                                  |\n",
      "|  Effect: -31.19                                                              |\n",
      "|  Observed: 68.81                                                             |\n",
      "|  Counter Factual: 100.00                                                     |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                  Cumulative                                  |\n",
      "|  Effect: -328.19                                                             |\n",
      "|  Observed: 724.20                                                            |\n",
      "|  Counter Factual: 1,052.39                                                   |\n",
      "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.estimators.panel.did import DID\n",
    "\n",
    "# initialize an estimator object\n",
    "estimator = DID()\n",
    "\n",
    "# estimate the treatment effect\n",
    "result = estimator.fit(panel)\n",
    "\n",
    "# print the treatment effect summary\n",
    "print(result.summary(percentage=True, cumulative=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "827d36bd-b1db-47a2-9c8b-1908a43fdfbe",
   "metadata": {
    "papermill": {
     "duration": 0.007767,
     "end_time": "2023-12-08T20:52:19.050293",
     "exception": false,
     "start_time": "2023-12-08T20:52:19.042526",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Now, the treatment effect without any confidence intervals is often not that helpful. Some estimators come with error estimates out of the box and will directly provide them (e.g. `DIDRegression`). For others, we can use an `Error` estimator to attach an error and calculate confidence intervals along with it. \n",
    "\n",
    "The following error estimators are available:\n",
    "\n",
    "- **Bootstrap**: Randomly sample units (with replacement) from the panel data and estimate the effect.\n",
    "- **Placebo**: Only sample from control units as use them as placebo.\n",
    "- **JackKnife**: Leave one out crossvalidation but removing one unit at a time.\n",
    "\n",
    "Each error estimate requires a treatment estimated on a new panel derived from the original data set by the corresponding method."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d38e512-7ae3-4728-bb5d-c03d2e18add1",
   "metadata": {
    "papermill": {
     "duration": 0.00769,
     "end_time": "2023-12-08T20:52:19.065726",
     "exception": false,
     "start_time": "2023-12-08T20:52:19.058036",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Each estimator has a method called `estimator.error(result, method)` which takes the original `Result` object returned before and the `Error` estimation method that should be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "326b096a-65ee-4bab-b059-a52b81b3cfda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:19.082436Z",
     "iopub.status.busy": "2023-12-08T20:52:19.082104Z",
     "iopub.status.idle": "2023-12-08T20:52:20.922484Z",
     "shell.execute_reply": "2023-12-08T20:52:20.921897Z"
    },
    "papermill": {
     "duration": 1.850065,
     "end_time": "2023-12-08T20:52:20.923675",
     "exception": false,
     "start_time": "2023-12-08T20:52:19.073610",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (Â±SE): -27.35 (Â±2.7923)                                              |\n",
      "|  Confidence Interval (90%): [-31.94 , -22.76]                           (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 87.70                                                      |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                  Percentage                                  |\n",
      "|  Effect (Â±SE): -31.19 (Â±3.1839)                                              |\n",
      "|  Confidence Interval (90%): [-36.42 , -25.95]                           (-)  |\n",
      "|  Observed: 68.81                                                             |\n",
      "|  Counter Factual: 100.00                                                     |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                  Cumulative                                  |\n",
      "|  Effect (Â±SE): -328.19 (Â±33.51)                                              |\n",
      "|  Confidence Interval (90%): [-383.30 , -273.07]                         (-)  |\n",
      "|  Observed: 724.20                                                            |\n",
      "|  Counter Factual: 1,052.39                                                   |\n",
      "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.core.error import Bootstrap\n",
    "\n",
    "se, runs = estimator.error(result, Bootstrap(n_samples=500))\n",
    "\n",
    "print(result.summary(conf=90))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b009fcde-3f3a-4999-ac75-97ae8976e892",
   "metadata": {
    "papermill": {
     "duration": 0.007686,
     "end_time": "2023-12-08T20:52:20.939393",
     "exception": false,
     "start_time": "2023-12-08T20:52:20.931707",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Similarly, we can use `SDID` as an estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b7ca16f9-6688-4c6a-9a29-40ea3b29d28f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:20.955757Z",
     "iopub.status.busy": "2023-12-08T20:52:20.955505Z",
     "iopub.status.idle": "2023-12-08T20:52:21.572835Z",
     "shell.execute_reply": "2023-12-08T20:52:21.572210Z"
    },
    "papermill": {
     "duration": 0.626973,
     "end_time": "2023-12-08T20:52:21.574036",
     "exception": false,
     "start_time": "2023-12-08T20:52:20.947063",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®\n",
      "|                                    Panel                                     |\n",
      "|  Time Periods: 31 (19/12)                                  total (pre/post)  |\n",
      "|  Units: 39 (38/1)                                       total (contr/treat)  |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                     ATT                                      |\n",
      "|  Effect (Â±SE): -15.60 (Â±2.9161)                                              |\n",
      "|  Confidence Interval (95%): [-21.32 , -9.8884]                          (-)  |\n",
      "|  Observed: 60.35                                                             |\n",
      "|  Counter Factual: 75.95                                                      |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                  Percentage                                  |\n",
      "|  Effect (Â±SE): -20.54 (Â±3.8393)                                              |\n",
      "|  Confidence Interval (95%): [-28.07 , -13.02]                           (-)  |\n",
      "|  Observed: 79.46                                                             |\n",
      "|  Counter Factual: 100.00                                                     |\n",
      "â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n",
      "|                                  Cumulative                                  |\n",
      "|  Effect (Â±SE): -187.25 (Â±34.99)                                              |\n",
      "|  Confidence Interval (95%): [-255.83 , -118.66]                         (-)  |\n",
      "|  Observed: 724.20                                                            |\n",
      "|  Counter Factual: 911.45                                                     |\n",
      "â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n"
     ]
    }
   ],
   "source": [
    "from azcausal.estimators.panel.sdid import SDID\n",
    "from azcausal.core.error import JackKnife\n",
    "\n",
    "# initialize an estimator object\n",
    "estimator = SDID()\n",
    "\n",
    "# estimate the treatment effect\n",
    "result = estimator.fit(panel)\n",
    "\n",
    "# here we use JackKnife which is optmized to be run with SDID\n",
    "estimator.error(result, JackKnife())\n",
    "\n",
    "# print the treatment effect summary\n",
    "print(result.summary(percentage=True, cumulative=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da94a466-0933-4204-8101-76cfb12e31ad",
   "metadata": {
    "papermill": {
     "duration": 0.007989,
     "end_time": "2023-12-08T20:52:21.590304",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.582315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Part III: Analysis & Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5dd7d35-a04f-4fe8-8808-ea1d42d5e873",
   "metadata": {
    "papermill": {
     "duration": 0.007784,
     "end_time": "2023-12-08T20:52:21.606067",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.598283",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Lastly, we want to give some idea on how to visualize results. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e409ddd5-4f8a-42f7-8e50-0a146d94978b",
   "metadata": {
    "papermill": {
     "duration": 0.007719,
     "end_time": "2023-12-08T20:52:21.621582",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.613863",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To learn more about how the error estimation was originally derived, we can check the corresponding distribution by plotting the estimates of each of the runs:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0cfab88a-c937-49c5-9bff-c90c11e0dfd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:21.638428Z",
     "iopub.status.busy": "2023-12-08T20:52:21.637934Z",
     "iopub.status.idle": "2023-12-08T20:52:21.911178Z",
     "shell.execute_reply": "2023-12-08T20:52:21.910542Z"
    },
    "papermill": {
     "duration": 0.283101,
     "end_time": "2023-12-08T20:52:21.912502",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.629401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: ylabel='Count'>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vv = [run.effect.value for run in runs]\n",
    "sns.histplot(vv, kde=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b71c77d-ea2c-451f-b63c-27d31af7d46e",
   "metadata": {
    "papermill": {
     "duration": 0.0085,
     "end_time": "2023-12-08T20:52:21.930123",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.921623",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Each post-analysis will be different depending on the estimator. We would like a give an example of `SDID` here. The available additional information stored by the estimator are:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6f618940-a493-4751-b886-57bbcea1d752",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:21.948208Z",
     "iopub.status.busy": "2023-12-08T20:52:21.947722Z",
     "iopub.status.idle": "2023-12-08T20:52:21.951749Z",
     "shell.execute_reply": "2023-12-08T20:52:21.951168Z"
    },
    "papermill": {
     "duration": 0.014278,
     "end_time": "2023-12-08T20:52:21.952883",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.938605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['did', 'lambd', 'omega', 'solvers', 'error'])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "effect = result.effect\n",
    "\n",
    "effect.data.keys()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73bf58c7-3c17-4a38-be70-3d769d923fa7",
   "metadata": {
    "papermill": {
     "duration": 0.008564,
     "end_time": "2023-12-08T20:52:21.970258",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.961694",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The DID results give us additional information about how the ATT is actually calculated:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "92282a5c-4c12-4bc7-8d60-6e3a6ea6af81",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:21.988493Z",
     "iopub.status.busy": "2023-12-08T20:52:21.988159Z",
     "iopub.status.idle": "2023-12-08T20:52:21.991989Z",
     "shell.execute_reply": "2023-12-08T20:52:21.991440Z"
    },
    "papermill": {
     "duration": 0.014205,
     "end_time": "2023-12-08T20:52:21.993111",
     "exception": false,
     "start_time": "2023-12-08T20:52:21.978906",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'att': -15.603827872733866,\n",
       " 'delta_contr': -19.192040932672626,\n",
       " 'delta_treat': -34.79586880540649,\n",
       " 'pre_contr': 120.49828909527162,\n",
       " 'post_contr': 101.30624816259899,\n",
       " 'pre_treat': 95.14586886957316,\n",
       " 'post_treat': 60.35000006416667}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "effect['did']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "243215de-0972-45bf-922f-ab72a27ceca3",
   "metadata": {
    "papermill": {
     "duration": 0.008671,
     "end_time": "2023-12-08T20:52:22.010679",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.002008",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The unit weights (`omega`) with at least 1% contribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f0119bda-c9e9-4ca3-b66c-796b3e822025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:22.029082Z",
     "iopub.status.busy": "2023-12-08T20:52:22.028745Z",
     "iopub.status.idle": "2023-12-08T20:52:22.034118Z",
     "shell.execute_reply": "2023-12-08T20:52:22.033553Z"
    },
    "papermill": {
     "duration": 0.015893,
     "end_time": "2023-12-08T20:52:22.035272",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.019379",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Nevada            0.124489\n",
       "New Hampshire     0.105048\n",
       "Connecticut       0.078287\n",
       "Delaware          0.070368\n",
       "Colorado          0.057513\n",
       "Illinois          0.053388\n",
       "Nebraska          0.047853\n",
       "Montana           0.045135\n",
       "Utah              0.041518\n",
       "New Mexico        0.040568\n",
       "Minnesota         0.039495\n",
       "Wisconsin         0.036667\n",
       "West Virginia     0.033569\n",
       "North Carolina    0.032805\n",
       "Idaho             0.031468\n",
       "Ohio              0.031461\n",
       "Maine             0.028211\n",
       "Iowa              0.025939\n",
       "Kansas            0.021605\n",
       "Pennsylvania      0.015352\n",
       "Indiana           0.010135\n",
       "Name: omega, dtype: float64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "effect['omega'].sort_values(ascending=False).loc[lambda x: x >= 0.01]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe06f796-dbc5-4740-bad2-317091b84964",
   "metadata": {
    "papermill": {
     "duration": 0.008838,
     "end_time": "2023-12-08T20:52:22.053147",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.044309",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Similarly, the time weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6b1e5085-f098-4df6-81bc-0073222b6f40",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:22.071756Z",
     "iopub.status.busy": "2023-12-08T20:52:22.071289Z",
     "iopub.status.idle": "2023-12-08T20:52:22.076268Z",
     "shell.execute_reply": "2023-12-08T20:52:22.075667Z"
    },
    "papermill": {
     "duration": 0.015529,
     "end_time": "2023-12-08T20:52:22.077422",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.061893",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1988    0.427076\n",
       "1986    0.366471\n",
       "1987    0.206453\n",
       "Name: lambd, dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "effect['lambd'].sort_values(ascending=False).loc[lambda x: x >= 0.01]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fa6a33e-4e59-49d7-8e66-d3283d6163c3",
   "metadata": {
    "papermill": {
     "duration": 0.008864,
     "end_time": "2023-12-08T20:52:22.095236",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.086372",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Or in general the treatment effect over time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "57924b8d-d6f7-4ce2-9c8a-bdc146b03db2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:22.113913Z",
     "iopub.status.busy": "2023-12-08T20:52:22.113515Z",
     "iopub.status.idle": "2023-12-08T20:52:22.120194Z",
     "shell.execute_reply": "2023-12-08T20:52:22.119690Z"
    },
    "papermill": {
     "duration": 0.017177,
     "end_time": "2023-12-08T20:52:22.121321",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.104144",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C</th>\n",
       "      <th>T</th>\n",
       "      <th>post</th>\n",
       "      <th>att</th>\n",
       "      <th>CF</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>99.202557</td>\n",
       "      <td>54.500000</td>\n",
       "      <td>True</td>\n",
       "      <td>-19.350137</td>\n",
       "      <td>73.850137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>100.035935</td>\n",
       "      <td>53.799999</td>\n",
       "      <td>True</td>\n",
       "      <td>-20.883516</td>\n",
       "      <td>74.683515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>100.433993</td>\n",
       "      <td>52.299999</td>\n",
       "      <td>True</td>\n",
       "      <td>-22.781573</td>\n",
       "      <td>75.081573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>98.497346</td>\n",
       "      <td>47.200001</td>\n",
       "      <td>True</td>\n",
       "      <td>-25.944925</td>\n",
       "      <td>73.144926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000</th>\n",
       "      <td>91.437300</td>\n",
       "      <td>41.599998</td>\n",
       "      <td>True</td>\n",
       "      <td>-24.484882</td>\n",
       "      <td>66.084880</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               C          T  post        att         CF\n",
       "Year                                                   \n",
       "1996   99.202557  54.500000  True -19.350137  73.850137\n",
       "1997  100.035935  53.799999  True -20.883516  74.683515\n",
       "1998  100.433993  52.299999  True -22.781573  75.081573\n",
       "1999   98.497346  47.200001  True -25.944925  73.144926\n",
       "2000   91.437300  41.599998  True -24.484882  66.084880"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Control (C), Treatment (T), Time Weights (lambd), Intervention (W), Average Treatment Effect on the Treated (att), Counter Factual (CF)\n",
    "effect.by_time.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "27ff5466-4011-48d1-8ee8-cbf842f05c26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:22.140621Z",
     "iopub.status.busy": "2023-12-08T20:52:22.140261Z",
     "iopub.status.idle": "2023-12-08T20:52:22.146898Z",
     "shell.execute_reply": "2023-12-08T20:52:22.146416Z"
    },
    "papermill": {
     "duration": 0.017514,
     "end_time": "2023-12-08T20:52:22.148055",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.130541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>C</th>\n",
       "      <th>CF</th>\n",
       "      <th>T</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1970</th>\n",
       "      <td>141.885954</td>\n",
       "      <td>123.0</td>\n",
       "      <td>123.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971</th>\n",
       "      <td>145.202800</td>\n",
       "      <td>121.0</td>\n",
       "      <td>121.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972</th>\n",
       "      <td>149.827472</td>\n",
       "      <td>123.5</td>\n",
       "      <td>123.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               C     CF      T\n",
       "Year                          \n",
       "1970  141.885954  123.0  123.0\n",
       "1971  145.202800  121.0  121.0\n",
       "1972  149.827472  123.5  123.5"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "effect.by_time[['C', 'CF', 'T']].head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a974214-45a8-4c24-89ee-9880546bbec2",
   "metadata": {
    "papermill": {
     "duration": 0.009124,
     "end_time": "2023-12-08T20:52:22.166490",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.157366",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Some estimators will have directly a plotting method for the result:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "abaa2162-362c-4313-a095-75107e6303df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:52:22.185561Z",
     "iopub.status.busy": "2023-12-08T20:52:22.185185Z",
     "iopub.status.idle": "2023-12-08T20:52:22.705729Z",
     "shell.execute_reply": "2023-12-08T20:52:22.705109Z"
    },
    "papermill": {
     "duration": 0.53147,
     "end_time": "2023-12-08T20:52:22.706982",
     "exception": false,
     "start_time": "2023-12-08T20:52:22.175512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x400 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "estimator.plot(result, show=False, CF=True)\n",
    "None"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6.594294,
   "end_time": "2023-12-08T20:52:23.032587",
   "environment_variables": {},
   "exception": null,
   "input_path": "/home/runner/work/azcausal/azcausal/docs/source/getting_started.ipynb",
   "output_path": "/home/runner/work/azcausal/azcausal/docs/source/getting_started.ipynb",
   "parameters": {},
   "start_time": "2023-12-08T20:52:16.438293",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}