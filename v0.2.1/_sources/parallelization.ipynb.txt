{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "88447df3",
   "metadata": {
    "papermill": {
     "duration": 0.002298,
     "end_time": "2023-12-08T20:51:11.182401",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.180103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Parallelization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7a188da-531d-447c-9748-7614163587cb",
   "metadata": {
    "papermill": {
     "duration": 0.001627,
     "end_time": "2023-12-08T20:51:11.185916",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.184289",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "For the `Parallelization` in this framework, we need two define to things:\n",
    "\n",
    "- A Function receiving exactly one parameters and return an output\n",
    "- A Generator that yields inputs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "674e4d65-5d21-43af-884f-648f71b18ff7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:51:11.190465Z",
     "iopub.status.busy": "2023-12-08T20:51:11.189993Z",
     "iopub.status.idle": "2023-12-08T20:51:11.196057Z",
     "shell.execute_reply": "2023-12-08T20:51:11.195518Z"
    },
    "papermill": {
     "duration": 0.009745,
     "end_time": "2023-12-08T20:51:11.197232",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.187487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# FUNCTION\n",
    "def f(x):\n",
    "    return sum([x + k for k in range(1000)])\n",
    "\n",
    "#GENERATOR\n",
    "def g():\n",
    "    for i in range(10):\n",
    "        yield i"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5215920-2fd8-422a-941b-5f069b1816b1",
   "metadata": {
    "papermill": {
     "duration": 0.001666,
     "end_time": "2023-12-08T20:51:11.200535",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.198869",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Then, we can use the parallelization implementation to run the function for each paramter returned in the generator."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04be00d5-d79a-4e64-8c4f-0ba4c39e0f66",
   "metadata": {
    "papermill": {
     "duration": 0.001572,
     "end_time": "2023-12-08T20:51:11.203689",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.202117",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Serial"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0aeee63c-89d4-4082-8512-e35bfbf9cee7",
   "metadata": {
    "papermill": {
     "duration": 0.001552,
     "end_time": "2023-12-08T20:51:11.206876",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.205324",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This does not parallelize but just runs a `for` loop. This is often used as a dummy by default."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dc87d7a8-01fa-49e5-82b2-1db90953989e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:51:11.211071Z",
     "iopub.status.busy": "2023-12-08T20:51:11.210656Z",
     "iopub.status.idle": "2023-12-08T20:51:11.296024Z",
     "shell.execute_reply": "2023-12-08T20:51:11.295482Z"
    },
    "papermill": {
     "duration": 0.088855,
     "end_time": "2023-12-08T20:51:11.297392",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.208537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[499500,\n",
       " 500500,\n",
       " 501500,\n",
       " 502500,\n",
       " 503500,\n",
       " 504500,\n",
       " 505500,\n",
       " 506500,\n",
       " 507500,\n",
       " 508500]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from azcausal.core.parallelize import Serial\n",
    "\n",
    "parallelize = Serial()\n",
    "\n",
    "parallelize(g(), func=f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf38731f-2bbe-4cb5-b9d4-0e7eeb87a5fd",
   "metadata": {
    "papermill": {
     "duration": 0.00258,
     "end_time": "2023-12-08T20:51:11.303486",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.300906",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Pool"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a02334b2-33b7-4c42-95e8-ff96b60f7c2a",
   "metadata": {
    "papermill": {
     "duration": 0.002606,
     "end_time": "2023-12-08T20:51:11.308709",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.306103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The `Pool` uses the Python implementation of threads or processes to run tasks in parallel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad092ea7-46b5-4bde-a5ba-1d4e8c21e152",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:51:11.314921Z",
     "iopub.status.busy": "2023-12-08T20:51:11.314650Z",
     "iopub.status.idle": "2023-12-08T20:51:11.324800Z",
     "shell.execute_reply": "2023-12-08T20:51:11.324287Z"
    },
    "papermill": {
     "duration": 0.015171,
     "end_time": "2023-12-08T20:51:11.326447",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.311276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[499500,\n",
       " 500500,\n",
       " 501500,\n",
       " 502500,\n",
       " 503500,\n",
       " 504500,\n",
       " 505500,\n",
       " 506500,\n",
       " 507500,\n",
       " 508500]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from azcausal.core.parallelize import Pool\n",
    "\n",
    "# please just for mode `thread` or `process`\n",
    "mode = 'thread'\n",
    " \n",
    "# the number of workers (by default #cores-1)\n",
    "max_workers = None\n",
    "\n",
    "parallelize = Pool(mode=mode, max_workers=max_workers)\n",
    "\n",
    "parallelize(g(), func=f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51bad57d-9de5-4e00-a880-d5b04f216285",
   "metadata": {
    "papermill": {
     "duration": 0.002699,
     "end_time": "2023-12-08T20:51:11.331982",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.329283",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Joblib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "510240c4-4c95-4522-a883-9fbcd0f21bd7",
   "metadata": {
    "papermill": {
     "duration": 0.001833,
     "end_time": "2023-12-08T20:51:11.336296",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.334463",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Uses the well-known `Joblib` implementation for parallelization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "579317af-ea27-4f7c-9e31-9bf3dfa759ca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:51:11.340932Z",
     "iopub.status.busy": "2023-12-08T20:51:11.340498Z",
     "iopub.status.idle": "2023-12-08T20:51:11.345384Z",
     "shell.execute_reply": "2023-12-08T20:51:11.344978Z"
    },
    "papermill": {
     "duration": 0.008318,
     "end_time": "2023-12-08T20:51:11.346436",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.338118",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[499500,\n",
       " 500500,\n",
       " 501500,\n",
       " 502500,\n",
       " 503500,\n",
       " 504500,\n",
       " 505500,\n",
       " 506500,\n",
       " 507500,\n",
       " 508500]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from azcausal.core.parallelize import Joblib\n",
    "\n",
    "n_jobs = None\n",
    "\n",
    "parallelize = Joblib(n_jobs=n_jobs)\n",
    "\n",
    "parallelize(g(), func=f)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e4758ec-2289-4875-a10a-b79d9a6da6f5",
   "metadata": {
    "papermill": {
     "duration": 0.00205,
     "end_time": "2023-12-08T20:51:11.350521",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.348471",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "In some cases you might want to just directly pass a function. The `partial` function becomes handy there to map arguments and keywords as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "82f5f50d-b9d2-43d0-84c5-3b59610cde96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-12-08T20:51:11.355340Z",
     "iopub.status.busy": "2023-12-08T20:51:11.355022Z",
     "iopub.status.idle": "2023-12-08T20:51:11.359418Z",
     "shell.execute_reply": "2023-12-08T20:51:11.358905Z"
    },
    "papermill": {
     "duration": 0.008214,
     "end_time": "2023-12-08T20:51:11.360677",
     "exception": false,
     "start_time": "2023-12-08T20:51:11.352463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[499500,\n",
       " 500500,\n",
       " 501500,\n",
       " 502500,\n",
       " 503500,\n",
       " 504500,\n",
       " 505500,\n",
       " 506500,\n",
       " 507500,\n",
       " 508500]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from functools import partial\n",
    "\n",
    "funcs = [partial(f, arg) for arg in g()]\n",
    "\n",
    "parallelize(funcs)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1.184442,
   "end_time": "2023-12-08T20:51:11.477716",
   "environment_variables": {},
   "exception": null,
   "input_path": "/home/runner/work/azcausal/azcausal/docs/source/parallelization.ipynb",
   "output_path": "/home/runner/work/azcausal/azcausal/docs/source/parallelization.ipynb",
   "parameters": {},
   "start_time": "2023-12-08T20:51:10.293274",
   "version": "2.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}